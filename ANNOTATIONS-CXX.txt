//-----------C++ ANNOTATIONS-----------//

//------------BEGIN------------//

FUNCTION POINTER:

DECLARATION: return_type (*ptrfuntion)(FUNCTION_PARAMETERS);
ASSIGNATION: ptrfuntion = function;
CALL: ptrfuntion(ARGUMENTS);

//------------END------------//

//------------BEGIN------------//

CLASS FUNCTION POINTER:

DECLARATION: return_type (Class::*ptrfuntion)(FUNCTION_PARAMETERS);
ASSIGNATION: ptrfuntion = &Class::function
CALL: (instance_class.*ptrfuntion)(ARGUMENTS);

//------------END------------//

//------------BEGIN------------//

KEY WITH FUNCTION ARRAY:

STRUCTURE/CLASS:

typedef struct KeyFunction
{
	type key;
	return_type (*function)(FUNCTION_PARAMETERS);
}KeyFunction;

ARRAY ASSIGNATION:

KeyFunction array_key_function[] =
{
	{ KEY_1, FUNCTION1 },
	{ KEY_2, FUNCTION2 },
	{ KEY_3, FUNCTION3 },
	{ NULL, nullptr },  //NULL TO END
};

CALL:

KeyFunction *akf_iterator = array_key_function;

while(akf_iterator->key != NULL)
{
	if(akf_iterator->key == key_pressed)
	{
		(akf_iterator->function)(ARGUMENTS);
		break;
	}	
}

//------------END------------//

//------------BEGIN------------//

PATTERN RAII:

CLASS PatternRAII
{
	Object *object;

	public:

		PatternRAII(PARAMETERS)
		:	object(nullptr) 
		{
			object = new Object(PARAMETERS);
		}

		~PatternRAII()
		{
			if(object)
			{
				delete object;
				object = nullptr;
			}
		}

		Object *getObject() { return object; }
}

//------------END------------//

//------------BEGIN------------//

VARIABLES:

/* 7.18.1.1  Exact-width integer types */
typedef signed char int8_t;
typedef unsigned char   uint8_t;
typedef short  int16_t;
typedef unsigned short  uint16_t;
typedef int  int32_t;
typedef unsigned   uint32_t;
__MINGW_EXTENSION typedef long long  int64_t;
__MINGW_EXTENSION typedef unsigned long long   uint64_t;

/* 7.18.1.2  Minimum-width integer types */
typedef signed char int_least8_t;
typedef unsigned char   uint_least8_t;
typedef short  int_least16_t;
typedef unsigned short  uint_least16_t;
typedef int  int_least32_t;
typedef unsigned   uint_least32_t;
__MINGW_EXTENSION typedef long long  int_least64_t;
__MINGW_EXTENSION typedef unsigned long long   uint_least64_t;

/*  7.18.1.3  Fastest minimum-width integer types
 *  Not actually guaranteed to be fastest for all purposes
 *  Here we use the exact-width types for 8 and 16-bit ints.
 */
typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short  int_fast16_t;
typedef unsigned short  uint_fast16_t;
typedef int  int_fast32_t;
typedef unsigned  int  uint_fast32_t;
__MINGW_EXTENSION typedef long long  int_fast64_t;
__MINGW_EXTENSION typedef unsigned long long   uint_fast64_t;

/* 7.18.2.1  Limits of exact-width integer types */
#define INT8_MIN (-128)
#define INT16_MIN (-32768)
#define INT32_MIN (-2147483647 - 1)
#define INT64_MIN  (-9223372036854775807LL - 1)

#define INT8_MAX 127
#define INT16_MAX 32767
#define INT32_MAX 2147483647
#define INT64_MAX 9223372036854775807LL

#define UINT8_MAX 255
#define UINT16_MAX 65535
#define UINT32_MAX 0xffffffffU  /* 4294967295U */
#define UINT64_MAX 0xffffffffffffffffULL /* 18446744073709551615ULL */

//------------END------------//